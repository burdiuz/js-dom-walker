{"version":3,"file":"dom-walker.js","sources":["../node_modules/tree-walker/dist/tree-walker.js","../source/augmentations/event.js","../source/augmentations/element.js","../source/htmlro-adapter.js","../source/attribute.js","../source/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nlet defaultAdapter = null;\n\nconst setDefaultAdapter = adapter => {\n  defaultAdapter = adapter;\n};\nconst getDefaultAdapter = () => defaultAdapter;\n\nconst namePrefixes = {};\n\nconst isValidPrefix = prefix => typeof prefix === 'string' && prefix.length === 1 && namePrefixes.hasOwnProperty(prefix);\n\nconst isPrefixedKey = key => key && typeof key === 'string' && key.length > 1 && namePrefixes.hasOwnProperty(key.charAt());\n\nconst getPrefixHandler = key => namePrefixes[key.charAt()];\n\nconst setNamePrefix = (prefix, handler) => {\n  if (typeof prefix !== 'string' || prefix.length !== 1) {\n    throw new Error('Name Prefix must be one character string.');\n  }\n\n  namePrefixes[prefix] = handler;\n};\n\nconst isIntKey = key => `${parseInt(key, 10)}` === key;\n\nconst getValue = (node, adapter, childName = undefined) => {\n  if (childName !== undefined) {\n    return adapter.getChildrenByName(node, childName);\n  }\n\n  return node;\n};\n\nconst getSingleNode = (node, adapter, childName = undefined) => {\n  const value = getValue(node, adapter, childName);\n\n  if (adapter.isList(value)) {\n    return adapter.getNodeAt(node);\n  }\n\n  return value;\n};\n\nconst getNodeList = (node, adapter, childName = undefined) => {\n  return adapter.toList(getValue(node, adapter, childName));\n};\n\nlet augmentations = {};\n\nconst resetAugmentations = (augs = {}) => {\n  augmentations = augs;\n};\n\nconst addAugmentations = (augs = {}) => {\n  augmentations = Object.assign({}, augmentations, augs);\n};\n\nconst hasAugmentation = key => key && typeof key === 'string' && augmentations.hasOwnProperty(key);\n\nconst applyAugmentation = (key, ...args) => augmentations[key](...args);\n\nlet handlers;\nlet utils;\n\nconst createWalkerNode = (node, adapter, childName = undefined) => {\n  function TreeWalker() {\n    throw new Error('Should have been never called');\n  }\n\n  // can be single Node and NodeList with length >= 0\n  // should it be always NodeList?\n  TreeWalker.node = node;\n  // childName always String/Symbol, Number's are being handled in proxy get wrapper\n  // INFO \"name\" is RO property of Function object\n  TreeWalker.childName = childName;\n  TreeWalker.adapter = adapter;\n  return TreeWalker;\n};\n\nconst wrap = (node, adapter, childName = undefined) => {\n  if (!adapter.isNode(node) && !adapter.isList(node)) {\n    return node;\n  }\n\n  return new Proxy(createWalkerNode(node, adapter, childName), handlers);\n};\n\n// eslint-disable-next-line\nutils = {\n  isIntKey,\n  getValue,\n  getSingleNode,\n  getNodeList,\n  wrap\n};\n\nconst get = ({ node, adapter, childName }, key) => {\n  /*\n   if string childName used\n   if starts with $, return attribute value\n   else return wrapper with current single node and property childName\n   if numeric index used, use node as parent and childName is undefined\n   */\n  if (isIntKey(key)) {\n    return wrap(adapter.getNodeAt(getNodeList(node, adapter, childName), key), adapter);\n  }\n\n  if (isPrefixedKey(key)) {\n    const handler = getPrefixHandler(key);\n    return handler(getValue(node, adapter, childName), adapter, [key.substr(1)], utils);\n  }\n\n  // return wrap with node and childName\n  return wrap(getValue(node, adapter, childName), adapter, key);\n};\n\nconst has = ({ node, adapter, childName }, key) => {\n  if (isIntKey(key)) {\n    return !!adapter.getNodeAt(getNodeList(node, adapter, childName), key);\n  }\n\n  if (isPrefixedKey(key)) {\n    // return adapter.hasAttribute(getSingleNode(node, adapter, childName), key.substr(1));\n    // don't know how to implement this, calling same handler as in GET seems overkill\n    return true;\n  }\n\n  return adapter.hasChild(getSingleNode(), key);\n};\n\nconst apply = ({ node, adapter, childName }, thisArg, argumentsList) => {\n  if (childName === undefined) {\n    throw new Error('Cannot call on TreeWalker Node');\n  }\n\n  // this works only of childName === prefix, one char string\n  // otherwise it should be passed into arguments\n  if (isValidPrefix(childName)) {\n    const handler = getPrefixHandler(childName);\n    return handler(node, adapter, argumentsList, utils);\n  }\n\n  if (hasAugmentation(childName)) {\n    // INFO cannot use target because it contains method's childName, not Node childName\n    // call the function with saving context, so other augmentations are accessible via \"this\"\n    return applyAugmentation(childName, node, adapter, argumentsList, utils);\n  }\n\n  // FIXME might throw only in dev mode(needs implementation)\n  throw new Error(`\"${childName}\" is not a callable object.`);\n};\n\nhandlers = {\n  get,\n  has,\n  apply\n};\n\nconst toString = node => node.toString();\nconst valueOf = node => node;\n\nvar coreAugmentations = {\n  toString,\n  valueOf,\n  [Symbol.toPrimitive]: node => node\n};\n\nconst children = (node, adapter, [childName], utils) => {\n  let list;\n\n  if (childName) {\n    list = adapter.getChildrenByName(node, childName);\n  } else {\n    list = adapter.getChildren(node);\n  }\n\n  return utils.wrap(list, adapter);\n};\n\nconst childAt = (node, adapter, [index = 0], utils) => utils.wrap(adapter.getChildAt(node, index), adapter);\n\nconst root = (node, adapter, args, utils) => utils.wrap(adapter.getNodeRoot(node), adapter);\n\nconst parent = (node, adapter, args, utils) => utils.wrap(adapter.getNodeParent(node), adapter);\n\nvar node = {\n  children,\n  childAt,\n  root,\n  parent\n};\n\nconst length = (node, adapter) => {\n  if (adapter.isList(node)) {\n    return adapter.getLength(node);\n  } else if (adapter.isNode(node)) {\n    return 1;\n  }\n  return 0;\n};\n\nconst first = (node, adapter, args, utils) => {\n  let result = node;\n\n  if (adapter.isList(node)) {\n    if (node.length) {\n      [result] = node;\n    } else {\n      result = [];\n    }\n  }\n\n  return utils.wrap(result, adapter);\n};\n\nconst filter = (node, adapter, [callback], utils) => {\n  // apply filter on element collection\n  // always return wrapped list\n  node = adapter.toList(node);\n  const list = [];\n\n  const wrappedNode = utils.wrap(node, adapter);\n  for (let index = 0; index < node.length; index += 1) {\n    const child = node[index];\n    if (callback(utils.wrap(child, adapter), index, wrappedNode)) {\n      list.push(child);\n    }\n  }\n\n  return utils.wrap(list, adapter);\n};\n\nconst map = (node, adapter, [callback, wrapNodes = true], utils) => {\n  // apply map on element collection\n  // if wrapNodes in FALSE, will generate normal Array with RAW results in it\n  // if wrapNodes in TRUE and all elements of resulting list are nodes, will\n  //   generate wrapped list and put all result into it\n  node = adapter.toList(node);\n  const list = [];\n\n  let areNodes = true;\n  const wrappedNode = utils.wrap(node, adapter);\n  for (let index = 0; index < node.length; index += 1) {\n    const child = node[index];\n    const result = callback(utils.wrap(child, adapter), index, wrappedNode);\n    areNodes = areNodes && adapter.isNode(result);\n    list.push(result);\n  }\n\n  return wrapNodes && areNodes ? utils.wrap(list, adapter) : list;\n};\n\nconst reduce = (node, adapter, [callback, result], utils) => {\n  // apply reduce on element collection\n  node = adapter.toList(node);\n\n  const wrappedNode = utils.wrap(node, adapter);\n  for (let index = 0; index < node.length; index += 1) {\n    const child = node[index];\n    result = callback(result, utils.wrap(child, adapter), index, wrappedNode);\n  }\n\n  return result;\n};\n\nvar list = {\n  length,\n  first,\n  filter,\n  map,\n  reduce\n};\n\naddAugmentations(coreAugmentations);\n\nconst create = (root, adapter = getDefaultAdapter()) => wrap(adapter.validateRoot(root), adapter);\n\nexports.setDefaultAdapter = setDefaultAdapter;\nexports.getDefaultAdapter = getDefaultAdapter;\nexports.addAugmentations = addAugmentations;\nexports.hasAugmentation = hasAugmentation;\nexports.resetAugmentations = resetAugmentations;\nexports.coreAugmentations = coreAugmentations;\nexports.nodeAugmentations = node;\nexports.listAugmentations = list;\nexports.setNamePrefix = setNamePrefix;\nexports.isValidPrefix = isValidPrefix;\nexports.create = create;\nexports.default = create;\n//# sourceMappingURL=tree-walker.js.map\n","const on = (node, adapter, [eventType, callback]) => {\r\n  node = adapter.toNode(node);\r\n  node.addEventListener(eventType, callback);\r\n  return () => node.removeEventListener(eventType, callback);\r\n};\r\n\r\nconst off = (node, adapter, [eventType, callback]) => {\r\n  adapter\r\n    .toNode(node)\r\n    .removeEventListener(eventType, callback);\r\n};\r\n\r\nconst emmit = (node, adapter, [event]) => {\r\n  adapter\r\n    .toNode(node)\r\n    .dispatchEvent(event instanceof Event ? event : new Event(String(event)));\r\n};\r\n\r\nexport default {\r\n  on,\r\n  off,\r\n  emmit,\r\n};\r\n","const name = (node, adapter) =>\r\n  adapter.getName(node);\r\n\r\nconst text = (node, adapter) =>\r\n  adapter.getText(node);\r\n\r\nconst attributes = (node, adapter) =>\r\n  adapter.getAttributes(node);\r\n\r\nconst query = (node, adapter, [queryString], utils) => {\r\n  const result = adapter.toNode(node).querySelector(queryString);\r\n  return utils.wrap(adapter.isNode(result) ? result : [], adapter);\r\n};\r\n\r\nconst queryAll = (node, adapter, [queryString], utils) => {\r\n  const result = adapter.toNode(node).querySelectorAll(queryString);\r\n  return utils.wrap(result, adapter);\r\n};\r\n\r\nexport default {\r\n  name,\r\n  text,\r\n  attributes,\r\n  query,\r\n  queryAll,\r\n};\r\n","const isList = (node) => (\r\n  node instanceof Array\r\n  || node instanceof HTMLCollection\r\n  || node instanceof NodeList\r\n);\r\n\r\nconst toList = (...args) => {\r\n  const { length } = args;\r\n  const [node] = args;\r\n\r\n  if (length === 1 && isList(node)) {\r\n    return node;\r\n  }\r\n\r\n  const list = [];\r\n\r\n  for (let index = 0; index < length; index++) {\r\n    const part = args[index];\r\n    if (isList(part)) {\r\n      list.push.call(part);\r\n    } else {\r\n      list.push(part);\r\n    }\r\n  }\r\n\r\n  return list;\r\n};\r\n\r\nconst isNode = (node) => node instanceof HTMLElement;\r\n\r\nconst toNode = (node) => {\r\n  // if list we use only first node\r\n  if (isList(node)) {\r\n    return node.length ? node[0] : null;\r\n  }\r\n\r\n  return isNode(node) ? node : null;\r\n};\r\n\r\nconst getNodeAt = (list, index = 0) => {\r\n  if (isList(list)) {\r\n    return list[index];\r\n  }\r\n\r\n  return list;\r\n};\r\n\r\nconst getLength = (list) => list.length;\r\n\r\n// Node\r\nconst getChildren = (node) => {\r\n  node = toNode(node);\r\n\r\n  // if not a node, return empty list\r\n  return isNode(node) ? node.children : toList();\r\n};\r\n\r\nconst getChildrenByName = (node, name) => {\r\n  name = name.toLowerCase();\r\n  const children = getChildren(node);\r\n  const { length } = children;\r\n\r\n  if (!length) {\r\n    return children;\r\n  }\r\n\r\n  const list = [];\r\n\r\n  for (let index = 0; index < children.length; index++) {\r\n    const child = children[index];\r\n    if (child.nodeName.toLowerCase() === name) {\r\n      list.push(child);\r\n    }\r\n  }\r\n\r\n  return list;\r\n};\r\n\r\nconst hasChildren = (node) => !!toNode(node).childElementCount;\r\n\r\nconst hasChild = (node, name) => {\r\n  const children = getChildren(node);\r\n  const { length } = children;\r\n\r\n  for (let index = 0; index < length; index++) {\r\n    if (children[index].nodeName === name) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst getChildAt = (node, index) => getChildren(node)[index];\r\n\r\nconst getAttributes = (node) => {\r\n  node = toNode(node);\r\n  if (node.hasAttributes()) {\r\n    return node.attributes;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst hasAttribute = (node, name) => toNode(node).hasAttribute(name);\r\n\r\nconst getAttributeValue = (node, name) => toNode(node).getAttribute(name);\r\n\r\nconst getName = (node) => toNode(node).nodeName;\r\n\r\nconst getText = (node) => toNode(node).innerText;\r\n\r\nconst getNodeParent = (node) => toNode(node).parentNode;\r\n\r\nconst getNodeRoot = (node) => toNode(node).getRootNode();\r\n\r\nconst validateRoot = (root) => {\r\n  if (root === undefined || root === document) {\r\n    return document.firstElementChild;\r\n  } else if (typeof root === 'string') {\r\n    return document.querySelector(root);\r\n  }\r\n\r\n  return root;\r\n};\r\n\r\nexport default {\r\n  isList,\r\n  toList,\r\n  isNode,\r\n  toNode,\r\n  getNodeAt,\r\n  getLength,\r\n  getChildren,\r\n  getChildrenByName,\r\n  hasChildren,\r\n  hasChild,\r\n  getChildAt,\r\n  getAttributes,\r\n  hasAttribute,\r\n  getAttributeValue,\r\n  getName,\r\n  getText,\r\n  getNodeParent,\r\n  getNodeRoot,\r\n  validateRoot,\r\n};\r\n","export const ATTRIBUTE_KEY = '$';\r\nexport const getAttribute = (node, adapter, [name]) => adapter.getAttributeValue(node, name);\r\n","import {\n  setNamePrefix,\n  setDefaultAdapter,\n  addAugmentations,\n  resetAugmentations,\n  coreAugmentations,\n  nodeAugmentations,\n  listAugmentations,\n  create as createRoot,\n} from 'tree-walker';\n\nimport htmlEventAugmentations from './augmentations/event';\nimport htmlElementAugmentations from './augmentations/element';\n\nimport HTMLROAdapter from './htmlro-adapter';\n\nimport { ATTRIBUTE_KEY, getAttribute } from './attribute';\n\nsetDefaultAdapter(HTMLROAdapter);\n\naddAugmentations(coreAugmentations);\naddAugmentations(nodeAugmentations);\naddAugmentations(listAugmentations);\naddAugmentations(htmlEventAugmentations);\naddAugmentations(htmlElementAugmentations);\n\nsetNamePrefix(ATTRIBUTE_KEY, getAttribute);\n\nconst create = (root, adapter = HTMLROAdapter) => createRoot(root, adapter);\n\nexport {\n  addAugmentations,\n  resetAugmentations,\n  setNamePrefix,\n  create,\n};\n\nexport default create;\n"],"names":["on","node","adapter","eventType","callback","toNode","addEventListener","removeEventListener","off","emmit","event","dispatchEvent","Event","String","name","getName","text","getText","attributes","getAttributes","query","queryString","utils","result","querySelector","wrap","isNode","queryAll","querySelectorAll","isList","Array","HTMLCollection","NodeList","toList","args","length","list","index","part","push","call","HTMLElement","getNodeAt","getLength","getChildren","children","getChildrenByName","toLowerCase","child","nodeName","hasChildren","childElementCount","hasChild","getChildAt","hasAttributes","hasAttribute","getAttributeValue","getAttribute","innerText","getNodeParent","parentNode","getNodeRoot","getRootNode","validateRoot","root","undefined","document","firstElementChild","ATTRIBUTE_KEY","setDefaultAdapter","HTMLROAdapter","addAugmentations","coreAugmentations","nodeAugmentations","listAugmentations","htmlEventAugmentations","htmlElementAugmentations","setNamePrefix","create","createRoot"],"mappings":"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"}